<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">


    <xacro:include filename="$(find mobo_bot_description)/urdf/other_parts/box_with_fillet_macro.xacro"/>
    <xacro:include filename="$(find mobo_bot_description)/urdf/other_parts/drive_wheel_macro.xacro"/>
    <xacro:include filename="$(find mobo_bot_description)/urdf/other_parts/drive_wheel_rim_macro.xacro"/>
    
    <xacro:include filename="$(find mobo_bot_description)/urdf/sensors/sonar.xacro"/>
    <xacro:include filename="$(find mobo_bot_description)/urdf/sensors/lidar.xacro"/>
    <xacro:include filename="$(find mobo_bot_description)/urdf/sensors/imu.xacro"/>
    <xacro:include filename="$(find mobo_bot_description)/urdf/sensors/cam.xacro"/>

    <xacro:property name="chassis_length" value="0.21"/>
    <xacro:property name="chassis_width" value="0.21"/>
    <xacro:property name="chassis_height" value="0.06"/>
    <xacro:property name="slab_height" value="0.005"/>
    <xacro:property name="chassis_mass" value="2.0"/>
    <xacro:property name="chassis_color" value="orange"/>

    <xacro:property name="wheel_seperation" value="0.23"/>
    <xacro:property name="wheel_radius" value="0.034"/>
    <xacro:property name="wheel_width" value="0.014"/>
    <xacro:property name="wheel_mass" value="0.08"/>

    <xacro:property name="castor_wheel_radius" value="${wheel_radius}"/>
    <xacro:property name="castor_wheel_mass" value="0.08"/>

    




    <!-- BASE LINK -->

    <!-- <base joint/> -->
    <link name="base_link">  
    </link>

    <!-- ################# -->






    <!-- CHASSIS LINK -->

    <joint name="chassis_joint" type="fixed">
        <parent link="base_link"/>
        <child link="chassis"/>
        <origin xyz="0 0 ${wheel_radius}"/>
    </joint>

    <link name="chassis">
        <xacro:insert_box_with_fillet x="-0.025" y="0" z="0" 
            size_x="${chassis_length}" size_y="${chassis_width}" size_z="${slab_height}" 
            fillet_radius="0.04" color="${chassis_color}"/>
        <xacro:insert_box_with_fillet x="-0.025" y="0" z="${chassis_height}" 
            size_x="${chassis_length}" size_y="${chassis_width}" size_z="${slab_height}" 
            fillet_radius="0.04" color="${chassis_color}"/>

        <visual>
            <origin xyz="0.05 0.08 ${chassis_height/2}" rpy="0 0 0"/>
            <geometry>
                <cylinder radius="0.005" length="${chassis_height}"/>
            </geometry>
            <material name="${chassis_color}"/>
        </visual>
        <visual>
            <origin xyz="0.05 -0.08 ${chassis_height/2}" rpy="0 0 0"/>
            <geometry>
                <cylinder radius="0.005" length="${chassis_height}"/>
            </geometry>
            <material name="${chassis_color}"/>
        </visual>

        <visual>
            <origin xyz="-0.1 0.08 ${chassis_height/2}" rpy="0 0 0"/>
            <geometry>
                <cylinder radius="0.005" length="${chassis_height}"/>
            </geometry>
            <material name="${chassis_color}"/>
        </visual>
        <visual>
            <origin xyz="-0.1 -0.08 ${chassis_height/2}" rpy="0 0 0"/>
            <geometry>
                <cylinder radius="0.005" length="${chassis_height}"/>
            </geometry>
            <material name="${chassis_color}"/>
        </visual>

        <collision>
           <origin xyz="-0.02 0 ${chassis_height/2}" rpy="0 0 0"/>
            <geometry>
                <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
            </geometry>
        </collision>
        <xacro:inertial_box mass="${chassis_mass}" x="${chassis_length}" y="${chassis_width}" z="${chassis_height}">
            <origin xyz="-0.04 0 ${chassis_height/2}" rpy="0 0 0"/>
        </xacro:inertial_box>
    </link>

    <xacro:if value="$(arg use_simulation)">
        <gazebo reference="chassis">
            <material>Gazebo/Orange</material>
        </gazebo>
    </xacro:if>
    

    <!--  ########################### -->










    <!-- LEFT DRIVE WHEEL -->

    <xacro:insert_drive_wheel 
        base_name="left_wheel" 
        parent_name="base_link" 
        x="0" y="${wheel_seperation/2}" z="${wheel_radius}"
        mass="${wheel_mass}"
        radius="${wheel_radius}"
        thickness="${wheel_width}"
        color="black"/>

    <xacro:if value="$(arg use_simulation)">
        <gazebo reference="left_wheel">
            <mu1>1.0</mu1>
            <mu2>1.0</mu2>
            <!-- <kp>1000000</kp> -->
            <!-- <kd>0.001</kd> -->
            <minDepth>0.005</minDepth>
            <!-- <fdir1>${fdir}</fdir1> -->
            <material>Gazebo/FlatBlack</material>
        </gazebo>
    </xacro:if>


    <xacro:insert_drive_wheel_rim
        base_name="left_rim" 
        parent_name="left_wheel" 
        radius="${wheel_radius}"
        thickness="${wheel_width}"
        spoke_width="0.005"
        color="red"/>

    <xacro:if value="$(arg use_simulation)">
        <gazebo reference="left_rim">
            <material>Gazebo/Red</material>
        </gazebo>
    </xacro:if>

    <!-- ############################# -->








    <!-- RIGHT DRIVE WHEEL -->

    <xacro:insert_drive_wheel 
        base_name="right_wheel" 
        parent_name="base_link" 
        x="0" y="${-wheel_seperation/2}" z="${wheel_radius}"
        mass="${wheel_mass}"
        radius="${wheel_radius}"
        thickness="${wheel_width}"
        color="black"/>
    
    <xacro:if value="$(arg use_simulation)">
        <gazebo reference="right_wheel">
            <mu1>1.0</mu1>
            <mu2>1.0</mu2>
            <!-- <kp>1000000</kp> -->
            <!-- <kd>0.001</kd> -->
            <minDepth>0.005</minDepth>
            <!-- <fdir1>${fdir}</fdir1> -->
            <material>Gazebo/FlatBlack</material>
        </gazebo>
    </xacro:if>


    <xacro:insert_drive_wheel_rim
        base_name="right_rim" 
        parent_name="right_wheel" 
        radius="${wheel_radius}"
        thickness="${wheel_width}"
        spoke_width="0.005"
        color="red"/>

    <xacro:if value="$(arg use_simulation)">
        <gazebo reference="right_rim">
            <material>Gazebo/Red</material>
        </gazebo>
    </xacro:if>

    <!-- ############################# -->









    <!--  castor WHEEL LINK -->

    <joint name="castor_wheel_joint" type="fixed">
        <parent link="base_link"/>
        <child link="castor_wheel"/>
        <origin xyz="-0.095 0 ${castor_wheel_radius/2}"/>
    </joint>


    <link name="castor_wheel">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <sphere radius="${castor_wheel_radius/2}" />
            </geometry>
            <material name="grey"/>
        </visual>
        <collision>
           <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <sphere radius="${castor_wheel_radius/2}" />
            </geometry>
        </collision>
        <xacro:inertial_sphere mass="${castor_wheel_mass}" radius="${castor_wheel_radius/2}">
            <origin xyz="0 0 0" rpy="0 0 0"/>
        </xacro:inertial_sphere>
    </link>

    <xacro:if value="$(arg use_simulation)">
        <gazebo reference="castor_wheel">
            <mu1>0.001</mu1>
            <mu2>0.001</mu2>
            <!-- <kp>1000000.0</kp> -->
            <!-- <kd>1.0</kd> -->
            <!-- <fdir1>1 0 0</fdir1> -->
            <!-- <minDepth>0.01</minDepth> -->
            <material>Gazebo/Grey</material>
        </gazebo>
    </xacro:if>

    <!--  ########################### -->
        



    
     <!--  lidar -->
    <xacro:property name="lidar_z_offset" value="0.04"/>
    <xacro:insert_lidar 
        base_name="lidar" 
        parent_name="chassis" 
        x="0.01" y="0" z="${chassis_height+lidar_z_offset}"
        mass="0.1" color="grey"/>

    <xacro:if value="$(arg use_simulation)">
        <gazebo reference="lidar">
            <material>Gazebo/DarkGrey</material>
        </gazebo>
    </xacro:if>

    <xacro:if value="$(arg use_simulation)">
      <gazebo reference="lidar">
        <sensor name="lidar" type="ray">
            <pose> 0 0 0 0 0 0 </pose>
            <visualize>false</visualize>
            <update_rate>10</update_rate>
            <ray>
                <scan>
                    <horizontal>
                        <samples>360</samples>
                        <min_angle>${-pi*2}</min_angle>
                        <max_angle>${pi*2}</max_angle>
                    </horizontal>
                </scan>
                <range>
                    <min>0.1</min>
                    <max>10.0</max>
                </range>
            </ray>
            <plugin name="lidar_plugin" filename="libgazebo_ros_ray_sensor.so">
                <ros>
                    <namespace>lidar</namespace>
                    <remapping>~/out:=scan</remapping>
                </ros>
                <output_type>sensor_msgs/LaserScan</output_type>
                <frame_name>lidar</frame_name>
            </plugin>
        </sensor>
      </gazebo>
    </xacro:if>

    

    <!--  imu -->
    <xacro:insert_imu
        base_name="imu" 
        parent_name="chassis" 
        x="0" y="0" z="${chassis_height}"/>

    <!-- <xacro:if value="$(arg use_simulation)">
        <gazebo reference="imu">
            <sensor name="imu" type="imu">
                <always_on>true</always_on>
                <update_rate>20</update_rate>
                <visualize>true</visualize>
                <imu>
                    <angular_velocity>
                        <x>
                            <noise type="gaussian">
                                <mean>0.0</mean>
                                <stddev>2e-4</stddev>
                            </noise>
                        </x>
                        <y>
                            <noise type="gaussian">
                                <mean>0.0</mean>
                                <stddev>2e-4</stddev>
                            </noise>
                        </y>
                        <z>
                            <noise type="gaussian">
                                <mean>0.0</mean>
                                <stddev>2e-4</stddev>
                            </noise>
                        </z>
                    </angular_velocity>
                    <linear_acceleration>
                        <x>
                            <noise type="gaussian">
                                <mean>0.0</mean>
                                <stddev>1.7e-2</stddev>
                            </noise>
                        </x>
                        <y>
                            <noise type="gaussian">
                                <mean>0.0</mean>
                                <stddev>1.7e-2</stddev>
                            </noise>
                        </y>
                        <z>
                            <noise type="gaussian">
                                <mean>0.0</mean>
                                <stddev>1.7e-2</stddev>
                            </noise>
                        </z>
                    </linear_acceleration>
                </imu>
                <plugin name="imu_plugin" filename="libgazebo_ros_imu_sensor.so">
                    <ros>
                        <namespace>imu</namespace>
                        <remapping>~/out:=data</remapping>
                    </ros>
                    <initial_orientation_as_reference>false</initial_orientation_as_reference>
                    <frame_name>imu</frame_name>
                </plugin>
            </sensor>
        </gazebo>        
    </xacro:if> -->



    <!--  sonar -->
    <xacro:insert_sonar
        base_name="sonar" 
        parent_name="chassis" 
        x="0.0825" y="0" z="${chassis_height/6}"
        mass="0.005" color="blue"/>

    <xacro:if value="$(arg use_simulation)">
        <gazebo reference="sonar">
            <material>Gazebo/Blue</material>
        </gazebo>
    </xacro:if>

    <!-- <xacro:if value="$(arg use_simulation)">
          <gazebo reference="sonar">
            <sensor name="sonar" type="ray">
                <always_on>false</always_on>
                <visualize>false</visualize>
                <pose>0.0 0 0.0 0 0 0</pose>
                <update_rate>10</update_rate>
                <ray>
                    <scan>
                        <horizontal>
                            <samples>20</samples>
                            <resolution>1</resolution> 
                            <min_angle>${-pi/90}</min_angle>
                            <max_angle>${pi/90}</max_angle>
                        </horizontal>
                        <vertical>
                            <samples>20</samples>
                            <resolution>1</resolution> 
                            <min_angle>${-pi/150}</min_angle>
                            <max_angle>${pi/150}</max_angle>
                        </vertical>
                    </scan>
                    <range>
                        <min>0.01</min>
                        <max>4.0</max>
                        <resolution>0.01</resolution>
                    </range>
                </ray>
        
                <plugin name="sonar_plugin" filename="libgazebo_ros_ray_sensor.so">
                    <ros>
                        <namespace>sonar</namespace>
                        <remapping>~/out:=range</remapping>
                    </ros>
                    <output_type>sensor_msgs/Range</output_type>
                    <radiation_type>ultrasound</radiation_type>
                    <frame_name>sonar</frame_name>
                </plugin>
            </sensor>
        </gazebo>
    </xacro:if> -->


    <!-- camera -->
    <xacro:property name="cam_x_offset" value="0.015"/>
    <xacro:property name="cam_z_offset" value="0.01"/>
    <xacro:insert_camera
        base_name="camera" 
        parent_name="chassis" 
        x="${0.08+cam_x_offset}" y="0" z="${chassis_height}"
        mass="0.005" tilt_angle="0.00" color="grey"/>

    <xacro:if value="$(arg use_simulation)">
        <gazebo reference="camera">
            <material>Gazebo/DarkGrey</material>
        </gazebo>
    </xacro:if>   

    <!-- <xacro:if value="$(arg use_simulation)">
        <gazebo reference="camera">
          <sensor name="camera" type="camera">
            <pose> 0 0 0 0 0 0 </pose>
            <visualize>false</visualize>
            <update_rate>20</update_rate>
            <camera>
                <horizontal_fov>1.46608</horizontal_fov>
                <image>
                    <format>R8G8B8</format>
                    <width>320</width>
                    <height>240</height>
                </image>
                <clip>
                    <near>0.02</near>
                    <far>5.0</far>
                </clip>
            </camera>
            <plugin name="camera_plugin" filename="libgazebo_ros_camera.so">
                <frame_name>camera_optical_link</frame_name>
            </plugin>
          </sensor>
        </gazebo>
    </xacro:if> -->

</robot>